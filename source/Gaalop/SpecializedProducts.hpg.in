/**
Copyright(C) 2018 ga-developers

Repository: https://github.com/ga-developers/ga-benchmark.git

This file is part of the GA-Benchmark project.

GA-Benchmark is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GA-Benchmark is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GA-Benchmark. If not, see <https://www.gnu.org/licenses/>.
/**/

#ifndef __GABENCHMARK_SPECIALIZED_PRODUCTS_HPP__
#define __GABENCHMARK_SPECIALIZED_PRODUCTS_HPP__

namespace gabenchmark {

    #define GABENCHMARK_DOES_NOT_IMPLEMENT_DotProduct

    template<typename LeftArgument, typename RightArgument>
    constexpr decltype(auto) GeometricProduct(LeftArgument const &lhs, RightArgument const &rhs) {
#pragma gpc begin
        a = mv_from_array(lhs, @LEFT_BASIS_BLADES@);
        b = mv_from_array(rhs, @RIGHT_BASIS_BLADES@);
#pragma clucalc begin
        ?gp_r = a * b;
#pragma clucalc end
#pragma gpc end

        return to_array(gp_r);
    }

    template<typename LeftArgument, typename RightArgument>
    constexpr decltype(auto) HestenesInnerProduct(LeftArgument const &lhs, RightArgument const &rhs) {
#if (GABENCHMARK_LEFT_GRADE != 0) && (GABENCHMARK_RIGHT_GRADE != 0)
#pragma gpc begin
        a = mv_from_array(lhs, @LEFT_BASIS_BLADES@);
        b = mv_from_array(rhs, @RIGHT_BASIS_BLADES@);
#pragma clucalc begin
        ?hip_r = a . b;
#pragma clucalc end
#pragma gpc end

        return to_array(hip_r);
#else
        return to_array(real_t(0)); // A workaround solution to cases where hip_r simplifies to zero and the variable is not declared by Gaalop's Preprocessor.
#endif
    }

    #define GABENCHMARK_DOES_NOT_IMPLEMENT_LeftContraction

    template<typename LeftArgument, typename RightArgument>
    constexpr decltype(auto) OuterProduct(LeftArgument const &lhs, RightArgument const &rhs) {
#if ((GABENCHMARK_LEFT_GRADE + GABENCHMARK_RIGHT_GRADE) <= GABENCHMARK_N_DIMENSIONS)
#pragma gpc begin
        a = mv_from_array(lhs, @LEFT_BASIS_BLADES@);
        b = mv_from_array(rhs, @RIGHT_BASIS_BLADES@);
#pragma clucalc begin
        ?op_r = a ^ b;
#pragma clucalc end
#pragma gpc end

        return to_array(op_r);
#else
        return to_array(real_t(0)); // A workaround solution to cases where op_r simplifies to zero and the variable is not declared by Gaalop's Preprocessor.
#endif
    }

    #define GABENCHMARK_DOES_NOT_IMPLEMENT_RegressiveProduct

    #define GABENCHMARK_DOES_NOT_IMPLEMENT_RightContraction

    #define GABENCHMARK_DOES_NOT_IMPLEMENT_ScalarProduct

}

#endif // __GABENCHMARK_SPECIALIZED_PRODUCTS_HPP__
