/**
Copyright(C) 2018 ga-developers

Repository: https://github.com/ga-developers/ga-benchmark.git

This file is part of the GA-Benchmark project.

GA-Benchmark is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GA-Benchmark is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GA-Benchmark. If not, see <https://www.gnu.org/licenses/>.
/**/

#ifndef __GABENCHMARK_SPECIALIZED_UTILS_HPP__
#define __GABENCHMARK_SPECIALIZED_UTILS_HPP__

#include <experimental/array>


namespace gabenchmark {

    using std::experimental::to_array;

    template<class Type>
    constexpr std::array<Type, 1> to_array(Type const &arg) {
        return std::array<Type, 1>{arg};
    }

    template<>
    decltype(auto) MakeBlade<0, GABENCHMARK_N_DIMENSIONS, real_t, factors_list_t>(real_t const &scalar, factors_list_t const &factors) {
        return kvector_t<0>{ scalar };
    }

#if GABENCHMARK_N_DIMENSIONS >= 1

    template<>
    decltype(auto) MakeBlade<1, GABENCHMARK_N_DIMENSIONS, real_t, factors_list_t>(real_t const &scalar, factors_list_t const &factors) {
        kvector_t<1> const &factor0 = factors[0];

#pragma gpc begin
        f0 = mv_from_array(factor0, @BASIS_BLADES_1@);
#pragma clucalc begin
        ?mb1_r = scalar * f0;
#pragma clucalc end
#pragma gpc end

        return to_array(mb1_r);
    }

#endif

#if GABENCHMARK_N_DIMENSIONS >= 2

    template<>
    decltype(auto) MakeBlade<2, GABENCHMARK_N_DIMENSIONS, real_t, factors_list_t>(real_t const &scalar, factors_list_t const &factors) {
        kvector_t<1> const &factor0 = factors[0];
        kvector_t<1> const &factor1 = factors[1];

#pragma gpc begin
        f0 = mv_from_array(factor0, @BASIS_BLADES_1@);
        f1 = mv_from_array(factor1, @BASIS_BLADES_1@);
#pragma clucalc begin
        ?mb2_r = scalar * (f0 ^ f1);
#pragma clucalc end
#pragma gpc end

        return to_array(mb2_r);
    }

#endif

#if GABENCHMARK_N_DIMENSIONS >= 3

    template<>
    decltype(auto) MakeBlade<3, GABENCHMARK_N_DIMENSIONS, real_t, factors_list_t>(real_t const &scalar, factors_list_t const &factors) {
        kvector_t<1> const &factor0 = factors[0];
        kvector_t<1> const &factor1 = factors[1];
        kvector_t<1> const &factor2 = factors[2];

#pragma gpc begin
        f0 = mv_from_array(factor0, @BASIS_BLADES_1@);
        f1 = mv_from_array(factor1, @BASIS_BLADES_1@);
        f2 = mv_from_array(factor2, @BASIS_BLADES_1@);
#pragma clucalc begin
        ?mb3_r = scalar * (f0 ^ f1 ^ f2);
#pragma clucalc end
#pragma gpc end

        return to_array(mb3_r);
    }

#endif

#if GABENCHMARK_N_DIMENSIONS >= 4

    template<>
    decltype(auto) MakeBlade<4, GABENCHMARK_N_DIMENSIONS, real_t, factors_list_t>(real_t const &scalar, factors_list_t const &factors) {
        kvector_t<1> const &factor0 = factors[0];
        kvector_t<1> const &factor1 = factors[1];
        kvector_t<1> const &factor2 = factors[2];
        kvector_t<1> const &factor3 = factors[3];

#pragma gpc begin
        f0 = mv_from_array(factor0, @BASIS_BLADES_1@);
        f1 = mv_from_array(factor1, @BASIS_BLADES_1@);
        f2 = mv_from_array(factor2, @BASIS_BLADES_1@);
        f3 = mv_from_array(factor3, @BASIS_BLADES_1@);
#pragma clucalc begin
        ?mb4_r = scalar * (f0 ^ f1 ^ f2 ^ f3);
#pragma clucalc end
#pragma gpc end

        return to_array(mb4_r);
    }

#endif

#if GABENCHMARK_N_DIMENSIONS >= 5

    template<>
    decltype(auto) MakeBlade<5, GABENCHMARK_N_DIMENSIONS, real_t, factors_list_t>(real_t const &scalar, factors_list_t const &factors) {
        kvector_t<1> const &factor0 = factors[0];
        kvector_t<1> const &factor1 = factors[1];
        kvector_t<1> const &factor2 = factors[2];
        kvector_t<1> const &factor3 = factors[3];
        kvector_t<1> const &factor4 = factors[4];

#pragma gpc begin
        f0 = mv_from_array(factor0, @BASIS_BLADES_1@);
        f1 = mv_from_array(factor1, @BASIS_BLADES_1@);
        f2 = mv_from_array(factor2, @BASIS_BLADES_1@);
        f3 = mv_from_array(factor3, @BASIS_BLADES_1@);
        f4 = mv_from_array(factor4, @BASIS_BLADES_1@);
#pragma clucalc begin
        ?mb5_r = scalar * (f0 ^ f1 ^ f2 ^ f3 ^ f4);
#pragma clucalc end
#pragma gpc end

        return to_array(mb5_r);
    }

#endif

}

#endif // __GABENCHMARK_SPECIALIZED_UTILS_HPP__
